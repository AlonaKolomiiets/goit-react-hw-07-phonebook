{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactListItem.module.css","components/Filter/Filter.module.css","redux/toolkit/actions/contactsActions.js","redux/toolkit/reducers/contactsReducer.js","redux/toolkit/reducers/index.js","redux/store.js","redux/toolkit/operations/contactsOperations.js","redux/toolkit/Â selectors/contactsSelectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","initialContactsRequest","initialContactsSuccess","initialContactsError","items","createReducer","_","payload","state","filter","id","loading","contactsReducers","combineReducers","rootReducer","contacts","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","persistStore","axios","defaults","baseURL","getLoadingSelector","getContactsSelector","getFilterSelector","getFilteredContacts","createSelector","length","normalizedFilter","toLowerCase","elem","name","includes","initialState","number","ContactForm","useSelector","dispatch","useDispatch","add","contactObj","contact","some","uniqueContact","post","then","data","catch","error","alert","useState","setForm","inputHandler","target","value","prev","onSubmit","event","preventDefault","uuidv4","className","styles","contactFormLable","onChange","type","placeholder","ContactListItem","deleteContacts","delete","deleteContact","contactListItemBtn","onClick","ContactList","filteredContacts","map","Filter","FilterLable","App","useEffect","get","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a3d75f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactFormLable\":\"ContactForm_contactFormLable__24Pjp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListItemBtn\":\"ContactListItem_contactListItemBtn__Zz2BS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FilterLable\":\"Filter_FilterLable__3aYIw\"};","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\nexport const addContactError = createAction(\"contacts/addContactError\");\n\nexport const deleteContactRequest = createAction(\n  \"contacts/deleteContactRequest\"\n);\nexport const deleteContactSuccess = createAction(\n  \"contacts/deleteContactSuccess\"\n);\nexport const deleteContactError = createAction(\"contacts/deleteContactError\");\n\nexport const changeFilter = createAction(\"@filter/change\");\n\nexport const initialContactsRequest = createAction(\"@contact/initialRequest\");\nexport const initialContactsSuccess = createAction(\"@contact/initialSuccess\");\nexport const initialContactsError = createAction(\"@contact/initialError\");\n","import { combineReducers, createReducer } from \"@reduxjs/toolkit\";\n\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n  initialContactsRequest,\n  initialContactsSuccess,\n  initialContactsError,\n} from \"../actions/contactsActions\";\n\nconst items = createReducer([], {\n  [initialContactsSuccess]: (_, { payload }) => payload,\n\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [initialContactsRequest]: () => true,\n  [initialContactsSuccess]: () => false,\n  [initialContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst contactsReducers = combineReducers({\n  items,\n  filter,\n  loading,\n});\nexport default contactsReducers;\n","import { combineReducers } from \"redux\";\nimport contactsReducers from \"./contactsReducer\";\n// import { persistReducer } from \"redux-persist\";\n// import storage from \"redux-persist/lib/storage\";\n\n// const persistConfig = {\n//   key: \"contacts\",\n//   storage,\n//   blacklist: [\"filter\"],\n// };\n\n// const persistedReducer = persistReducer(persistConfig, contactsReducer);\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducers,\n});\n\nexport default rootReducer;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./toolkit/reducers/index\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nexport const persistor = persistStore(store);\n","import axios from \"axios\";\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  initialContactsRequest,\n  initialContactsSuccess,\n  initialContactsError,\n} from \"../actions/contactsActions\";\n\naxios.defaults.baseURL = \"http://localhost:3000\";\n\nexport const initialContacts = () => (dispatch) => {\n  dispatch(initialContactsRequest());\n  axios\n    .get(`/contacts`)\n    .then(({ data }) => dispatch(initialContactsSuccess(data)))\n    .catch((error) => dispatch(initialContactsError(error)));\n};\n\nexport const addContact = (contact) => (dispatch) => {\n  dispatch(addContactRequest());\n  axios\n    .post(\"/contacts\", contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch((error) => dispatch(addContactError(error)));\n};\n\nexport const deleteContact = (id) => (dispatch) => {\n  dispatch(deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch((error) => dispatch(deleteContactError(error)));\n};\n","import { createSelector } from \"reselect\";\n\nexport const getLoadingSelector = (state) => state.contacts.loading;\nexport const getContactsSelector = (state) => state.contacts.items;\nexport const getFilterSelector = (state) => state.contacts.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContactsSelector, getFilterSelector],\n  (items, filter) => {\n    if (!filter.length) {\n      return items;\n    } else {\n      const normalizedFilter = filter.toLowerCase();\n      return items.filter((elem) =>\n        elem.name.toLowerCase().includes(normalizedFilter)\n      );\n    }\n  }\n);\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addContact } from \"../../redux/toolkit/operations/contactsOperations\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { getContactsSelector } from \"../../redux/toolkit/Â selectors/contactsSelectors\";\nimport styles from \"./ContactForm.module.css\";\n\nconst initialState = {\n  name: \"\",\n  number: \"\",\n};\n\nconst ContactForm = () => {\n  const contacts = useSelector(getContactsSelector);\n  const dispatch = useDispatch();\n\n  const uniqueContact = (name) => {\n    return contacts.some(\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  const add = (contactObj) => {\n    uniqueContact(contactObj.name)\n      ? alert(`${contactObj.name} is already in contacts`)\n      : dispatch(addContact(contactObj));\n  };\n\n  const [{ name, number }, setForm] = useState({\n    ...initialState,\n  });\n\n  const inputHandler = ({ target }) => {\n    const { value, name } = target;\n    setForm((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    const contact = {\n      name,\n      number,\n      id: uuidv4(),\n    };\n\n    add(contact);\n\n    setForm(initialState);\n  };\n\n  return (\n    <div>\n      <form onSubmit={submitHandler}>\n        <label className={styles.contactFormLable}>\n          <input\n            onChange={inputHandler}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter name...\"\n            value={name}\n          ></input>\n        </label>\n        <label className={styles.contactFormLable}>\n          <input\n            onChange={inputHandler}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Enter number...\"\n            value={number}\n          ></input>\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/toolkit/operations/contactsOperations\";\nimport styles from \"./ContactListItem.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const deleteContacts = (id) => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <>\n      <li key={id}>\n        {name}:{number}\n        <button\n          className={styles.contactListItemBtn}\n          onClick={() => deleteContacts(id)}\n        >\n          Delete\n        </button>\n      </li>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ContactListItem from \"./ContactListItem\";\nimport { getFilteredContacts } from \"../../redux/toolkit/Â selectors/contactsSelectors\";\n// import PropTypes from \"prop-types\";\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n  return (\n    <ul>\n      {filteredContacts.map((contact) => (\n        <ContactListItem\n          key={contact.id}\n          id={contact.id}\n          name={contact.name}\n          number={contact.number}\n        />\n      ))}\n    </ul>\n  );\n};\n\n// ContactList.propTypes = {\n//   filteredContacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n// };\n\nexport default ContactList;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeFilter } from \"../../redux/toolkit/actions/contactsActions\";\nimport { getFilterSelector } from \"../../redux/toolkit/Â selectors/contactsSelectors\";\nimport styles from \"./Filter.module.css\";\n\nconst Filter = () => {\n  const filter = useSelector(getFilterSelector);\n  const dispatch = useDispatch();\n\n  const inputHandler = ({ target }) => {\n    const { value } = target;\n    dispatch(changeFilter(value));\n  };\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <label className={styles.FilterLable}>\n        <input\n          onChange={inputHandler}\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Enter name...\"\n          value={filter}\n        />\n      </label>\n    </>\n  );\n};\n\nexport default Filter;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { initialContacts } from \"./redux/toolkit/operations/contactsOperations\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport {\n  getLoadingSelector,\n} from \"./redux/toolkit/Â selectors/contactsSelectors\";\n\nconst App = () => {\n  // const contacts = useSelector((store) => store.contacts.items);\n  // const filter = useSelector((store) => store.contacts.filter);\n\n  //  const loading = useSelector((store) => store.contacts.loading);\n  const loading = useSelector(getLoadingSelector);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initialContacts());\n  }, []);\n\n  // const filteredContacts = useSelector((store) => getFilteredContacts(store));\n\n  // const filterContacts = () => {\n  //   if (!filter.length) {\n  //     return contacts;\n  //   } else {\n  //     return contacts.filter((elem) =>\n  //       elem.name.toLowerCase().includes(filter.toLowerCase())\n  //     );\n  //   }\n  // };\n\n  return (\n    <div>\n      {loading && <h2>Loading...</h2>}\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}